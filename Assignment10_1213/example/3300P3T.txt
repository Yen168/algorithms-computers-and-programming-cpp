//The names of the people in your group go here
//Math 3300 Project 3
//Polynomial Class

#include<iostream>
#include<cmath>
using namespace std;

class poly{
    private:
        int deg; //degree of polynomial
        double* coeff; //a pointer to the coefficients

    public:
        //constructors and deconstructors
	poly(); //p(x)=0
        poly(int); //p(x)=0+0x+0x^2+...+0x^n
        poly(int,double); //p(x)=c+0x+0x^2+...+0x^n
        poly(int,const double[]); //p(x)=c0+c1x^1+c2x^2+...+cnx^n
        poly(const poly&); //p(x)=q(x)
        ~poly(); //delete coefficients

        //functions which do not change the private members of poly
        int degree() const; //returns degree
        double get(int) const; //returns k^th coefficient
        double of(double) const; //returns value of p(x) at x=a
        poly derivative() const; //returns new poly p'(x)
        poly derivative(int) const; //returns new poly p^(k)(x) the kth derivative
        poly integral(double) const; //returns new poly c + antiderivative of p(x)
        double integral(double,double) const; //returns integral of p(x) from x=a to x=b

        //functions which can change the private members of poly
        void resize(int); //changes degree of p(x) keeping as many of the old coefficients as possible
        void set(int,double); //sets a particular coefficient
        void set(const double[]); //sets all coefficients if given correctly sized array

};

//Put the definitions of the above public member functions here

//Overloaded Arithmetic Operators
poly operator+(const poly& p, const poly& q) //p(x)+q(x)
{

}

poly operator-(const poly& p, const poly& q) //p(x)-q(x)
{

}

poly operator*(const poly& p, const poly& q) //p(x)q(x)
{

}

poly operator+(double x, const poly& p) //c+p(x)
{

}

poly operator+(const poly& p, double x) //p(x)+c
{

}

poly operator-(double x, const poly& p) //c-p(x)
{

}

poly operator-(const poly& p, double x)//p(x)-c
{

}

poly operator*(double x, const poly& p)//cp(x)
{

}

poly operator*(const poly& p, double x)//p(x)c
{

}

poly operator-(const poly& p) // -p(x)
{

}

//Overloaded Logical Operators
bool operator==(const poly& p, const poly& q) //p(x)==q(x) ?
{

}

bool operator!=(const poly& p, const poly& q) //p(x)!=q(x) ?
{

}

//Overloaded Stream Operators

ostream& operator<<(ostream& out, const poly& p) //cout << p(x)
{

}

istream& operator>>(istream& in, poly& p) //cin >> p(x)
{

}

//To test your class use this main function
//You can comment out any lines containing functions/operations you haven't yet defined.

int main()
{
    poly p; //should create p(x)=0

    cout << "p=" << p << endl; //should output "p=0"

    cout << "Enter a polynomial: ";
    cin >> p; //Should ask you to enter a degree and then the appropriate number of coefficients
    
    double c[]={1,-2,-3,4,5};
    poly q(4,c); //should create q(x)=1-2x-3x^2+4x^3+5x^4
    
    double a,b;
    cout << "Enter 2 doubles: ";
    cin >> a >> b;
    
    cout << "p=" << p << endl; //should display the p that you entered up above
    cout << "q=" << q << endl; //should display: "q=1-2x-3x^2+4x^3+5x^4"

    cout << "a=" << a << " and b=" << b << endl;
    
    cout << "p-q=" << p-q << endl; //tests p-q (polynomial minus)
    cout << "p+q=" << p+q << endl; //tests p+q (polynomial plus)
    cout << "p*q=" << p*q << endl; //tests p*q (polynomial times)
    cout << "q+a=" << q+a << endl; //tests q+a (scalar addition)
    cout << "b+q=" << b+q << endl; //tests a+q (scalar addition)
    cout << "p-a=" << p-a << endl; //tests p-a (scalar subtraction)
    cout << "a-p=" << a-p << endl; //tests a-p (scalar subtraction)
    cout << "a*p=" << a*p << endl; //tests a*p (scalar multiplication)
    cout << "p*b=" << p*b << endl; //tests p*a (scalar multiplication)
    cout << "-p=" << -p << endl; //tests unary minus (negative)

    cout << "The degree of p is " << p.degree() << endl; //tests degree() member function
    cout << "The coefficient of x^2 in p(x) is " << p.get(2) << endl; //tests get() member function should
		//return coefficient of x^2 or 0

    cout << "p(a)=" << p.of(a) << endl; //should evaluate p(a)

    cout << "p'(x)=" << p.derivative() << endl; //derivative of p
    cout << "p''(x)=" << p.derivative(2) << endl; //second derivative of p
    cout << "p'''(x)=" << p.derivative(3) << endl; //third derivative of p

    cout << "int(p(x),x)=" << p.integral(a) << endl; //indefinite integral of p, constant of integration a
    cout << "int(p(x),a,b)=" << p.integral(a,b) << endl; //definite integral of p from a to b

    p.resize(6); //resizes p to degree 6 polynomial
    q.resize(2); //resizes q to degree 2 polynomial: q=1-2x-3x^2
    
    cout << "p=" << p << endl;
    cout << "q=" << q << endl;

    if(p!=q) cout << "p and q are not equal.\n"; //tests p!=q
    
    poly r=p; //should create new poly r with same degree/coefficients of p
    
    cout << "r=" << r << endl;
    if(p==r) cout << "p and r are equal.\n"; //tests p==r, this should be true

    
    double d[]={8,7,6};
    q.set(d); //gives q new coefficients

    cout << "q=" << q << endl;
    
    q.set(0,0); //sets constant term to 0 in q
    cout << "q=" << q << endl;

    poly s(4); //should create s=0+0x+0x^2+0x^3+0x^4
    poly t(4,3); //should create t=4+0x+0x^2+0x^3+0x^4

    cout << "s=" << s << endl;
    cout << "t=" << t << endl;


    system("PAUSE");
    return 0;
}